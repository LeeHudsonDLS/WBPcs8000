/*
 * A collection of XML templates intended to be loaded by the an instance of the Sequencer class.
 * All manipulation and subsequent reference to these templates is intended to be done through the previously
 * mentioned object.
 */
std::string moveTemplate="<sequencer_prog><slave></slave><control_set><type>cascade</type><kp></kp><ti></ti><td></td><t1></t1><ke></ke><ke2></ke2><kff></kff><krei></krei><tau></tau><elim></elim><kdcc></kdcc><sym_man></sym_man><sym_adp></sym_adp><gki></gki><tki></tki><pk></pk><velocity_mode>no</velocity_mode></control_set><synth_set><unit>ramp</unit><type>acc</type><stream>phys14</stream><stream2>phys15</stream2><rate></rate><end_rate></end_rate><acc></acc><end_ampl></end_ampl></synth_set><clear><triggers>TRIG_SYNTH_R</triggers></clear><start></start><wait><triggers>TRIG_SYNTH_R</triggers></wait><synth_set><unit>ramp</unit><type>acc</type><rate></rate><end_rate></end_rate><acc></acc><end_ampl></end_ampl></synth_set><clear><triggers>TRIG_SYNTH_R</triggers></clear><start></start><wait><triggers>TRIG_SYNTH_R</triggers></wait><start></start></sequencer_prog>";
std::string moveWaitTemplate="<sequencer_prog><slave></slave><control_set><type>cascade</type><kp></kp><ti></ti><td></td><t1></t1><ke></ke><ke2></ke2><kff></kff><krei></krei><tau></tau><elim></elim><kdcc></kdcc><sym_man></sym_man><sym_adp></sym_adp><gki></gki><tki></tki><pk></pk><velocity_mode>no</velocity_mode></control_set><synth_set><unit>ramp</unit><type>acc</type><stream>phys1</stream><stream2>phys15</stream2><rate></rate><end_rate></end_rate><acc></acc><end_ampl></end_ampl></synth_set><clear><ndrag>phys1</ndrag></clear><trigger_set><name>TRIG_MIN_PHY(1)</name><value>-0.138</value></trigger_set><clear><triggers>TRIG_SYNTH_R;TRIG_MIN_PHY(1)</triggers></clear><start></start><wait><triggers>TRIG_SYNTH_R;TRIG_MIN_PHY(1)</triggers></wait><start></start><host_send><string>6;0;NodeIndex;2</string></host_send><synth_set><unit>ramp</unit><type>acc</type><rate></rate><end_rate></end_rate><acc></acc><end_ampl></end_ampl></synth_set><clear><ndrag>phys1</ndrag></clear><trigger_set><name>TRIG_MIN_PHY(1)</name><value>-0.138</value></trigger_set><clear><triggers>TRIG_MIN_PHY(1)</triggers></clear><start></start><wait><triggers>TRIG_MIN_PHY(1)</triggers></wait><start></start><clear><ndrag>phys1</ndrag></clear><trigger_set><name>TRIG_MIN_PHY(1)</name><value>-0.138</value></trigger_set><clear><triggers>TRIG_MIN_PHY(1)</triggers></clear><wait><triggers>TRIG_MIN_PHY(1)</triggers></wait></sequencer_prog>";
std::string absoluteSyncMoveTemplate="<sequencer_prog><slave>0</slave><sync><device></device></sync><wait><triggers>TRIG_SYNC</triggers></wait><synth_set><unit>ramp</unit><type>acc</type><stream>phys14</stream><stream2>phys15</stream2><rate>5</rate><end_rate>0</end_rate><acc>0</acc><end_ampl>10</end_ampl><end_time>50</end_time></synth_set><clear><triggers>TRIG_SYNTH_R</triggers></clear><start></start><wait><triggers>TRIG_SYNTH_R</triggers></wait><synth_set><unit>ramp</unit><type>const</type></synth_set><synth_set><unit>wave1</unit><type>reset</type></synth_set><synth_set><unit>wave2</unit><type>reset</type></synth_set><synth_set><unit>stream</unit><type>reset</type></synth_set><synth_set><unit>curve</unit><type>reset</type></synth_set><start></start></sequencer_prog>";

